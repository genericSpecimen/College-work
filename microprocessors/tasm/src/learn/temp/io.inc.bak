.model small
.stack 100h

.data
	BUFFSIZE	equ 7	; reserve one space for '-' as well in case number is negative
	bufferin	db BUFFSIZE		; max number of characters allowed (including return)
			db ?			; number of characters entered by user
			db BUFFSIZE dup (?)	; characters entered by user
			db '$'

	bufferout db BUFFSIZE dup('$')
.code

printstr proc
	push ax		; save current value of ax since ah gets modified

	mov ah, 09h
	; needs offset of string in dx
	int 21h

	pop ax	; restore previous value of ax
	ret
printstr endp

itos proc
	; itos: integer to string
	; converts value of ax to a string
	; algo:
	;	1. push each digit (starting from LSD) onto stack by dividing by 10 and pushing the remainder
	;	2. pop each digit, add 30h, and store it in string

	; -------- saving register values -------
	push bx
	push cx
	push dx
	push si
	; ---------------------------------------

	mov si, offset bufferout	; output string is to be stored in bufferout

	; --- test if number is negative or not ---
	test ax, ax
	jns POSITIVE
	mov byte ptr [si], '-'	; display minus if negative 
	inc si
	neg ax	; make it positive
	POSITIVE:
	;------------------------------------------

	mov cx, 0	; keep track of number of digits pushed onto stack, used during pop cycle
	pushi:	; push each digit onto stack
		mov dx, 0	; required for division
		mov bx, 10	; divide by 10
		div bx

		push dx	; remainder is in dx
		inc cx
		cmp ax, 0	; if ax is zero, then we are done pushing (or ax was zero to begin with)
		je retrieve
		jmp pushi

	retrieve:
	popi:	; pop each digit and store it in bufferout

		pop dx		; pop into dx
		add dl, 30h	; convert to ASCII
		mov [si], dl	; write at string index si
		inc si
		loop popi	; loop until cx == 0

	exititos:
		mov byte ptr [si], '$'	; so that contents of previous string are not included
	; ------- restore register values --------
	pop si
	pop dx
	pop cx
	pop bx
	; -----------------------------------------
	ret
itos endp

stoi proc
	; stoi: string to integer
	; converts string in buffinput to an integer which will be stored in ax

	;------- save register values -------
	push ax
	push cx
	push dx

	; Format of DOS input buffer:
	; Offset  Size    Description     (Table 01344)
	; 00h    BYTE    maximum characters buffer can hold
	; 01h    BYTE    (call) number of chars from last input which may be recalled
	; (ret) number of characters actually read, excluding CR
	; 02h  N BYTEs   actual characters read, including the final carriage return

	mov si, offset bufferin
	inc si		; point to number of characters entered
	
	mov cl, [si]	; num of chars entered
	mov ch, 0	; make cx == cl
	add si, cx	; make si point to LSD

	mov bx, 0	; stores the result
	mov bp, 1	; multiply by (1, 10, 100, ...)
	CONVERT_CHAR:

		mov al, [si]	; character to process
		sub al, 30h	; al - '0'
		mov ah, 0	; make ax == al

		mul bp		; ax = ax*bp
		add bx, ax	; add result

		mov ax, bp
		mov bp, 10
		mul bp		; multiply current weight by 10
		mov bp, ax	; new weight

		dec si		; next digit
		loop CONVERT_CHAR
	pop dx
	pop cx
	pop ax
	ret
stoi endp

clearbuffer proc
	; --- save registers --
	push si
	push cx
	; ---------------------

	mov si, offset bufferin
	mov byte ptr [si], BUFFSIZE
	inc si
	mov cx, BUFFSIZE
	inc cx
	dollars:
		mov byte ptr [si], '$'
		inc si
		loop dollars

	; --- restore registers --
	pop cx
	pop si
	; ---------------------

	ret
clearbuffer endp

